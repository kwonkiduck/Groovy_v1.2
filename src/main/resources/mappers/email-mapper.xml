<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.groovy.email.EmailMapper">
    <insert id="inputReceivedEmailsFrom" parameterType="emailVO">
        insert into EMAIL_FROM( email_etpr_code
                              , email_from_addr
                              , EMAIL_SN
                              , email_from_sj
                              , email_from_cn
                              , email_from_cn_type
                              , email_from_send_date
                              , EMAIL_FROM_TMPR_STRE_AT)
        values ( 'EMAIL-' || EMAIL_SEQ.nextval || '-' || to_char(#{emailFromSendDate}, 'yyyymmdd')
               , #{emailFromAddr}
               , #{emailSn}
               , #{emailFromSj}
               , #{emailFromCn}
               , #{emailFromCnType}
               , #{emailFromSendDate}
               , #{emailFromTmprStreAt})
    </insert>

    <insert id="inputReceivedEmailsTo" parameterType="emailVO">
        insert into EMAIL_TO( email_etpr_code
                            , email_from_addr
                            , EMAIL_SN
                            , email_to_addr
                            , email_to_received_date)
        values ( 'EMAIL-' || EMAIL_SEQ.currval || '-' || to_char(#{emailFromSendDate}, 'yyyymmdd')
               , #{emailFromAddr}
               , #{emailSn}
               , #{emailToAddr}
               , #{emailToReceivedDate})
    </insert>

    <insert id="inputReceivedEmailsCc" parameterType="emailVO">
        insert into EMAIL_CC( email_etpr_code
                            , email_from_addr
                            , email_sn
                            , email_cc_addr
                            , EMAIL_CC_RECEIVED_DATE)
        values ( 'EMAIL-' || EMAIL_SEQ.currval || '-' || to_char(#{emailFromSendDate}, 'yyyymmdd')
               , #{emailFromAddr}
               , #{emailSn}
               , #{emailCcAddr}
               , #{emailCcReceivedDate})
    </insert>

    <insert id="inputReceivedStatus" parameterType="emailVO">
        insert into EMAIL_RECEIVED_STTUS( email_etpr_code
                                        , email_from_addr
                                        , email_received_empl_id
                                        , email_sn
                                        , email_redng_at
                                        , email_delete_at
                                        , email_imprtnc_at
                                        , email_real_delete_at)
        VALUES ( 'EMAIL-' || EMAIL_SEQ.currval || '-' || to_char(#{emailFromSendDate}, 'yyyymmdd')
               , #{emailFromAddr}
               , #{emailReceivedEmplId}
               , #{emailSn}
               , #{emailRedngAt}
               , #{emailDeleteAt}
               , #{emailImprtncAt}
               , #{emailRealDeleteAt})
    </insert>
    <insert id="uploadEmailFile" parameterType="map">
        /* 총무팀 - 공지사항 등록 파일 업로드 처리(다중) */
        INSERT INTO UPLOAD_FILE(UPLOAD_FILE_SN,
                                UPLOAD_FILE_ETPR_CODE,
                                UPLOAD_FILE_ORGINL_NM,
                                UPLOAD_FILE_STRE_NM,
                                UPLOAD_FILE_SIZE,
                                UPLOAD_FILE_RGSDE)
        VALUES (UPLOAD_FILE_SEQ.nextval,
                #{notiEtprCode},
                #{originalFileName},
                #{newFileName},
                #{fileSize},
                sysdate)
    </insert>
    <update id="deleteMails" parameterType="String">
        update EMAIL_RECEIVED_STTUS
        set EMAIL_REAL_DELETE_AT = 'Y'
        where EMAIL_ETPR_CODE = #{emailEtprCode}
    </update>

    <select id="existsMessageNumber" resultType="int" parameterType="Map">
        SELECT COUNT(ef.EMAIL_SN)
        FROM EMAIL_FROM ef
                 left join EMAIL_TO ET on ef.EMAIL_ETPR_CODE = ET.EMAIL_ETPR_CODE
                 left join EMAIL_CC EC on ef.EMAIL_ETPR_CODE = EC.EMAIL_ETPR_CODE
        WHERE ef.EMAIL_SN = #{emailSn}
          and (et.EMAIL_TO_ADDR = #{nowEmailAddr} or ec.EMAIL_CC_ADDR = #{nowEmailAddr})
    </select>

    <!-- 수신받은 메일함 -->
    <select id="getAllReceivedMailsToMe" resultType="emailVO" parameterType="Map">
        SELECT distinct ef.EMAIL_ETPR_CODE
             , ef.EMAIL_SN
             , ef.EMAIL_FROM_ADDR
             , ef.EMAIL_FROM_SJ
             , ef.EMAIL_FROM_SEND_DATE
             , et.EMAIL_TO_ADDR
             , et.EMAIL_TO_RECEIVED_DATE
             , ers.EMAIL_DELETE_AT
             , ers.EMAIL_IMPRTNC_AT
             , ers.EMAIL_REDNG_AT
        FROM EMAIL_FROM ef
                 left JOIN EMAIL_TO et on ef.EMAIL_ETPR_CODE = et.EMAIL_ETPR_CODE
                 left join EMAIL_RECEIVED_STTUS ers on ef.EMAIL_ETPR_CODE = ers.EMAIL_ETPR_CODE
        where ef.EMAIL_FROM_ADDR not in #{emailAddr}
          and et.EMAIL_TO_ADDR in #{emailAddr}
          and ers.EMAIL_DELETE_AT = #{at}
          and ers.EMAIL_REAL_DELETE_AT = 'N'
        order by ef.EMAIL_ETPR_CODE desc
    </select>

    <!-- 참조받은 메일함 -->
    <select id="getAllReferencedMailsToMe" resultType="emailVO" parameterType="Map">
        SELECT distinct ef.email_etpr_code
             , ef.EMAIL_SN
             , ef.EMAIL_FROM_ADDR
             , ef.EMAIL_FROM_SJ
             , ef.EMAIL_FROM_SEND_DATE
             , ec.EMAIL_CC_ADDR
             , ec.EMAIL_CC_RECEIVED_DATE
             , ers.EMAIL_DELETE_AT
             , ers.EMAIL_IMPRTNC_AT
             , ers.EMAIL_REDNG_AT
        FROM EMAIL_FROM ef
                 left JOIN EMAIL_CC ec on ef.EMAIL_ETPR_CODE = ec.EMAIL_ETPR_CODE
                 left join EMAIL_RECEIVED_STTUS ers on ef.EMAIL_ETPR_CODE = ers.EMAIL_ETPR_CODE
        where ef.EMAIL_FROM_ADDR not in #{emailAddr}
          and ec.EMAIL_CC_ADDR in #{emailAddr}
          and ers.EMAIL_DELETE_AT = #{at}
          and ers.EMAIL_REAL_DELETE_AT = 'N'
        order by ef.EMAIL_ETPR_CODE desc
    </select>

    <!-- 내게 쓴 메일함 -->
    <select id="getAllSentMailsToMe" resultType="emailVO" parameterType="Map">
        SELECT distinct ef.EMAIL_ETPR_CODE
             , ef.EMAIL_SN
             , ef.EMAIL_FROM_ADDR
             , ef.EMAIL_FROM_SJ
             , ef.EMAIL_FROM_SEND_DATE
             , et.EMAIL_TO_ADDR
             , et.EMAIL_TO_RECEIVED_DATE
             , ers.EMAIL_DELETE_AT
        FROM EMAIL_FROM ef
                 left JOIN EMAIL_TO et on ef.EMAIL_ETPR_CODE = et.EMAIL_ETPR_CODE
                 left join EMAIL_RECEIVED_STTUS ers on ef.EMAIL_ETPR_CODE = ers.EMAIL_ETPR_CODE
        where ef.EMAIL_FROM_ADDR = #{emailAddr}
          and ef.EMAIL_FROM_ADDR = et.EMAIL_TO_ADDR
          and ers.EMAIL_DELETE_AT = #{at}
          and ers.EMAIL_REAL_DELETE_AT = 'N'
        order by ef.EMAIL_ETPR_CODE desc
    </select>

    <!-- 보낸메일함 -->
    <select id="getAllSentMailsByMe" resultType="emailVO" parameterType="Map">
        select distinct ef.EMAIL_ETPR_CODE
                      , ef.EMAIL_SN
                      , ef.EMAIL_FROM_ADDR
                      , ef.EMAIL_FROM_SJ
                      , ef.EMAIL_FROM_SEND_DATE
                      , et.EMAIL_TO_ADDR
                      , et.EMAIL_TO_RECEIVED_DATE
                      , ers.EMAIL_DELETE_AT
        from EMAIL_FROM ef
                 left join EMAIL_TO ET on ef.EMAIL_ETPR_CODE = ET.EMAIL_ETPR_CODE
                 left join EMAIL_RECEIVED_STTUS ERS on ef.EMAIL_FROM_ADDR = ERS.EMAIL_FROM_ADDR
        where ef.EMAIL_FROM_ADDR = #{emailAddr}
          and et.EMAIL_TO_ADDR not in #{emailAddr}
          and ers.EMAIL_DELETE_AT = #{at}
          and ers.EMAIL_REAL_DELETE_AT = 'N'
        order by ef.EMAIL_ETPR_CODE desc
    </select>

    <select id="getEmployeeByEmailAddr" resultType="int" parameterType="String">
        select count(EMPL_ID)
        from empl
        where EMPL_EMAIL = #{emailAddr}
    </select>

    <select id="getUnreadMailCount" resultType="int" parameterType="String">
        select count(EMAIL_ETPR_CODE)
        from EMAIL_RECEIVED_STTUS
        where EMAIL_RECEIVED_EMPL_ID = #{emplId}
          and EMAIL_REDNG_AT = 'N'
    </select>

    <select id="getEmailSeq" resultType="int">
        SELECT EMAIL_SEQ.nextval
        FROM dual
    </select>

    <select id="getEmplNmByEmplEmail" resultType="String" parameterType="String">
        select EMPL_NM
        from EMPL
        where EMPL_EMAIL = #{emailAddr}
    </select>

    <select id="getMaxEmailSn" resultType="int">
        select max(EMAIL_SN)
        from EMAIL_FROM
    </select>

    <update id="modifyEmailRedngAt" parameterType="Map">
        update EMAIL_RECEIVED_STTUS
        set ${emailAtKind} = #{at}
        where EMAIL_ETPR_CODE in #{emailEtprCode}
    </update>
</mapper>

